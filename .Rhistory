plot(Maine.annual.ts, ylab = "unemployed (%)")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
install.packages("rstan", dependencies = TRUE)
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
library(rethinking)data(Howell1)d <- Howell1
library(rethinking)data(Howell1)d <- Howell1
data(Howell1)
library(rethinking)
data(Howell1)
d <- Howell1
d2 <- d[ d$age >= 18 , ]
mu.list <- seq( from=140, to=160 , length.out=200 )sigma.list <- seq( from=4 , to=9 , length.out=200 )post <- expand.grid( mu=mu.list , sigma=sigma.list )post$LL <- sapply( 1:nrow(post) , function(i) sum( dnorm(  d2$height ,  mean=post$mu[i] ,  sd=post$sigma[i] ,  log=TRUE ) ) )post$prod <- post$LL + dnorm( post$mu , 178 , 20 , TRUE ) +  dunif( post$sigma , 0 , 50 , TRUE )post$prob <- exp( post$prod - max(post$prod) )
mu.list <- seq( from=140, to=160 , length.out=200 )
sigma.list <- seq( from=4 , to=9 , length.out=200 )
post <- expand.grid( mu=mu.list , sigma=sigma.list )
post$LL <- sapply( 1:nrow(post) , function(i) sum( dnorm(  d2$height ,  mean=post$mu[i] ,  sd=post$sigma[i] ,  log=TRUE ) ) )post$prod <- post$LL + dnorm( post$mu , 178 , 20 , TRUE ) +  dunif( post$sigma , 0 , 50 , TRUE )post$prob <- exp( post$prod - max(post$prod) )
post$LL <- sapply( 1:nrow(post) , function(i) sum( dnorm(  d2$height ,  mean=post$mu[i] ,  sd=post$sigma[i] ,  log=TRUE ) ) )
post$LL <- sapply( 1:nrow(post) , function(i) sum( dnorm(  d2$height ,  mean=post$mu[i] ,  sd=post$sigma[i] ,  log=TRUE ) ) )post$prod <- post$LL + dnorm( post$mu , 178 , 20 , TRUE ) +  dunif( post$sigma , 0 , 50 , TRUE )post$prob <- exp( post$prod - max(post$prod) )
post$LL <- sapply( 1:nrow(post) , function(i) sum( dnorm(  d2$height ,  mean=post$mu[i] ,  sd=post$sigma[i] ,  log=TRUE ) ) )
post$LL <- sapply( 1:nrow(post) , function(i) sum( dnorm(d2$height ,  mean=post$mu[i] ,  sd=post$sigma[i] ,  log=TRUE ) ) )
flist <- alist(  height ~ dnorm( mu , sigma ) ,  mu ~ dnorm( 178 , 20 ) ,  sigma ~ dunif( 0 , 50 ))
library(rethinking)
flist <- alist(  height ~ dnorm( mu , sigma ) ,  mu ~ dnorm( 178 , 20 ) ,  sigma ~ dunif( 0 , 50 ))
library(rethinking)data(Howell1)d <- Howell1d2 <- d[ d$age >= 18 , ]
library(rethinking)data(Howell1)d <- Howell1d2 <- d[ d$age >= 18 , ]
library(rethinking)data(Howell1)d <- Howell1d2 <- d[ d$age >= 18 , ]
library(rethinking)data(Howell1)d <- Howell1d2 <- d[ d$age >= 18 , ]
library(readr)library(caret)
library(caret)
library(rethinking)
flist <- alist(
height ~ dnorm( mu , sigma ) ,
mu ~ dnorm( 178 , 20 ) ,
sigma ~ dunif( 0 , 50 )
)
m4.1 <- map( flist , data=d2 )
library(rethinking)
data(Howell1)
d <- Howell1
d2 <- d[ d$age >= 18 , ]
m4.1 <- map( flist , data=d2 )
precis( m4.1 )
die <- 1:6
die + 1:4
sample(die, 1)
sample(die, 1)
sample(die, 1)
sample(die, 1)
sample(die, 1)
sample(x=die, size=1)
dice <- sample(x=die, size=2, replace=TRUE)
dice
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
}
roll()
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
return dice
}
roll()
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
dice
}
roll()
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
dice
}
roll()
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
dice
}
roll()
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
dice
}
roll()
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
dice
}
roll()
roll2 <- function(type) {
dice <- sample(x=type,size=2,replace=TRUE)
dice
}
roll2(type = 1:20 )
roll3 <- function(type=1:6) {
dice <- sample(x = type, size =2, replace=TRUE)
}
roll3()
roll3 <- function(type=1:6) {
dice <- sample(x = type, size =2, replace=TRUE)
dice
}
roll3()
roll3 <- function(type=1:6) {
dice <- sample(x = type, size =2, replace=TRUE)
dice
}
roll3()
roll3(type = 1:20)
library(ggplot2)
result <- replicate(1000, roll3())
qplot(result, bindwith=1)
qplot(result, binwidth=1)
result <- replicate(1000, roll3())
result
roll3 <- function(type=1:6) {
dice <- sample(x = type, size =2, replace=TRUE)
sum(dice)
}
result <- replicate(1000, roll3())
qplot(result, binwidth=1)
result <- replicate(10000, roll3())
qplot(result, binwidth=1)
qplot(result, binwidth=1)
qplot(result)
qplot(result, binwidth=1.5)
qplot(result, binwidth=1)
roll3 <- function(type=1:6) {
dice <- sample(x = type, size =2, replace=TRUE,prob=c(1/8,1/8,1/8,1/8,1/8,3/8))
sum(dice)
}
result <- replicate(10000, roll3())
qplot(result, binwidth=1)
dhyper(x = 1, m = 1,n=99, k=5)
library(rethinking)
data(WaffleDivorce)
d <- WaffleDivorce
# standardize predictor
d$MedianAgeMarriage_s <- (d$MedianAgeMarriage-mean(d$MedianAgeMarriage))/
sd(d$MedianAgeMarriage)
d$Marriage_s <- (d$Marriage - mean(d$Marriage))/sd(d$Marriage)
d <- d[,c("Divorce","MedianAgeMarriage_s","Marriage_s" )]
m5.1 <- map2stan(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bA * MedianAgeMarriage.s ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d, iter = 1e4, chains = 3)
m5.1 <- map2stan(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bA * MedianAgeMarriage_s ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d, iter = 600, chains = 3)
plot(m5.1)
m5.1 <- map2stan(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bA * MedianAgeMarriage_s ,
a ~ dnorm( 0 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dcauchy( 0 , 1 )
) , data = d, iter = 600, chains = 3)
precis(m5.1)
plot(m5.1)
plot(m5.1)
m5.1 <- map2stan(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bA * MedianAgeMarriage_s ,
a ~ dnorm( 5 , 10 ) ,
bA ~ dnorm( 0 , 0.5 ) ,
sigma ~ dcauchy( 0 , 0.5 )
) , data = d, iter = 600, chains = 3)
plot(m5.1)
plot(m5.1)
x <- factor(x = c(0,1,1,1), levels = c(0,1), labels = c("m","f") )
str(x)
x
as.character(levels(x))[x]
as.numeric(x)
as.numeric(x)[x]
as.numeric(x)
as.numeric(levels(x))
as.numeric(x)
table(x)
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
f1
f1 <- factor(letters)
f1
pkgs <- c(
"broom", "dplyr", "ggplot2", "jsonlite", "Lahman", "purrr",
"rcorpora", "readr", "rmarkdown", "stringr", "tibble", "tidyr"
)
install.packages(pkgs)
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer, size = cly))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer, size = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl, alpha = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = year))
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = year))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
?geom_smooth
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv))
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(mapping = aes(color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(mapping = aes(linetype = drv, color = drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = subset(mpg, class == "subcompact"))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +
geom_point() +
geom_smooth()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, alpha = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill") +
ggtitle('Position = "fill"')
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge") +
ggtitle('Position = "dodge"')
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), position = "jitter") +
ggtitle('Position = "jitter"')
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = clarity))
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = clarity, color = cut))
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = clarity, color = clarity))
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = clarity, size = ..prop..,
group = clarity, color = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut)) + facet_wrap(~clarity)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = clarity)) + facet_wrap(~cut)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ drv )
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ drv. )
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(drv ~ . )
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(drv )
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
install.packages(c("rmarkdown", "knitr", "DT"))
```{r}
summary(cars)
plot(cars)
head(cars)
corr(cars)
cor(cars)
cov(cars)
```{r}
library(nycflights13) # data
library(dplyr)        # cleaning functions
library(ggplot2)      # plotting functions
library(lubridate)
install.packages("lubridate")
library(ggplot2)
library(nycflights13) # data
library(dplyr)        # cleaning functions
library(ggplot2)      # plotting functions
library(lubridate)    # date-time processing
dow <- 'Saturday'
delays <-
flights %>%
mutate(date = ymd(paste(year, month, day)),
weekday = wday(date, label = TRUE, abbr = FALSE)) %>%
select(origin, date, weekday, dep_delay) %>%
filter(!is.na(dep_delay))
year <-
delays %>%
group_by(origin, date) %>%
summarise(mean_delay = mean(dep_delay))
weekday <-
delays %>%
filter(weekday == dow) %>%
group_by(origin) %>%
summarise(mean_delay = mean(dep_delay))
dow <- 'Saturday'
delays <-
flights %>%
mutate(date = ymd(paste(year, month, day)),
weekday = wday(date, label = TRUE, abbr = FALSE)) %>%
select(origin, date, weekday, dep_delay) %>%
filter(!is.na(dep_delay))
library(nycflights13)
install.packages("nycflights13")
library(nycflights13) # data
library(dplyr)        # cleaning functions
library(ggplot2)      # plotting functions
library(lubridate)    # date-time processing
dow <- 'Saturday'
delays <-
flights %>%
mutate(date = ymd(paste(year, month, day)),
weekday = wday(date, label = TRUE, abbr = FALSE)) %>%
select(origin, date, weekday, dep_delay) %>%
filter(!is.na(dep_delay))
year <-
delays %>%
group_by(origin, date) %>%
summarise(mean_delay = mean(dep_delay))
weekday <-
delays %>%
filter(weekday == dow) %>%
group_by(origin) %>%
summarise(mean_delay = mean(dep_delay))
```{r echo = FALSE}
ggplot(year, aes(x = date, y = mean_delay, color = origin)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
ggtitle("Smoothed daily mean delays") +
ylab("Mean delay (m)") +
theme_bw()
```
ggplot(year, aes(x = date, y = mean_delay, color = origin)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
ggtitle("Smoothed daily mean delays") +
ylab("Mean delay (m)") +
theme_bw()
ggplot(year, aes(x = date, y = mean_delay, color = origin)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
ggtitle("Smoothed daily mean delays") +
ylab("Mean delay (m)") +
theme_bw()
knitr::kable(weekday)
knitr::kable(weekday, caption = "Mean Delays by Airport")
setwd(dir = "/Users/david_salazarv/Desktop/Tidyverse")
library(tidyr)
library(dplyr)
library(ggplot2)
library(readr)
library(tibble)
library(nycflights13)
flights %>%
select(tailnum, carrier) %>%
group_by(tailnum) %>%
summarise(count = n(),
n_carrier = length(unique(carrier))) %>%
arrange(desc(n_carrier))
flights %>%
select(tailnum, carrier) %>%
group_by(tailnum) %>%
summarise(count = n(),
n_carrier = n_distinct(carrier)) %>%
arrange(desc(n_carrier))
weather_day <- weather %>%
group_by(year, month, day, origin) %>%
summarise(avg_temp = mean(temp, na.rm = TRUE),
avg_humid = mean(humid, na.rm = TRUE),
avg_visib = mean(visib, na.rm = TRUE))
weather_day
weather_day <- weather %>%
group_by(year, month, day, origin) %>%
summarise_each(funs(mean), temp, humid, visib)
weather_day
setwd(dir = "/Users/david_salazarv/Desktop/Tidyverse")
suppressPackageStartupMessages(library(dplyr))
library(gapminder)
gtbl <- gapminder %>%
tbl_df
install.packages("gapminder")
suppressPackageStartupMessages(library(dplyr))
library(gapminder)
gtbl <- gapminder %>%
tbl_df
glimpse(gtbl)
gtbl %>%
group_by(continent, country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE))
gtbl %>%
group_by(continent, country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
tail(10)
gtbl %>%
group_by(continent, country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
filter(min_rank(worst_le_delta) < 2)
gtbl %>%
group_by(country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
filter(min_rank(worst_le_delta) < 2) %>%
arrange(worst_le_delta)
gtbl %>%
group_by(continent, country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
filter(min_rank(worst_le_delta) < 2) %>%
arrange(worst_le_delta)
gtbl %>%
group_by(continent, country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE))
gtbl %>%
group_by(continent, country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
ungroup()
gtbl %>%
group_by(continent, country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
ungroup() %>%
filter(min_rank(worst_le_delta) < 2) %>%
arrange(worst_le_delta)
gtbl %>%
group_by(continent, country) %>%
select(country, year, continent, lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
group_by(continent) %>%
filter(min_rank(worst_le_delta) < 2) %>%
arrange(worst_le_delta)
